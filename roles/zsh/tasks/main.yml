---
- name: "Clean /tmp/powerline_fonts if exists"
  file:
    state: absent
    path: "{{ item }}"
  with_items:
    - "/tmp/awesome-terminal-fonts"
    - "/tmp/powerline_fonts"
    - "/tmp/oh-my-zsh"
  ignore_errors: yes

- name: Checking if fc-cache installed in the system
  shell: which fc-cache
  register: which_fc_cache
  failed_when: which_fc_cache.rc > 1
  when: 'ansible_system == "Linux"'

- name: "Downloading 'powerline' fonts"
  git:
    repo: 'https://github.com/powerline/fonts.git'
    dest: '/tmp/powerline_fonts'
    version: 'master'

- copy:
    src: '/tmp/powerline_fonts/Hack/'
    dest: '/usr/share/fonts/'
  when: 'ansible_system == "Linux" and which_fc_cache.rc == 0'
  become: yes

- copy:
    src: '/tmp/powerline_fonts/Hack/'
    dest: '/Library/Fonts'
  when: 'ansible_system == "Darwin"'
  become: yes

- copy:
    src: '/tmp/powerline_fonts/Hack/'
    dest: '{{ brew_user_home_dir }}/.fonts/'
  when: 'ansible_system == "Linux" and which_fc_cache.rc == 0'

- copy:
    src: '/tmp/powerline_fonts/Hack/'
    dest: '{{ brew_user_home_dir }}/Library/Fonts/'
  when: 'ansible_system == "Darwin"'

- name: "Downloading 'awesome-terminal-fonts'"
  git:
    repo: 'https://github.com/gabrielelana/awesome-terminal-fonts.git'
    dest: '/tmp/awesome-terminal-fonts'
    version: 'master'

- name: "Installing 'awesome-terminal-fonts' to {{ brew_user_home_dir }}/.fonts/"
  copy:
    src: '/tmp/awesome-terminal-fonts/build/'
    dest: '{{ brew_user_home_dir }}/.fonts/'
  when: 'ansible_system == "Linux" and which_fc_cache.rc == 0'

- name: "Installing 'awesome-terminal-fonts' to {{ brew_user_home_dir }}/Library/Fonts/"
  copy:
    src: '/tmp/awesome-terminal-fonts/build/'
    dest: '{{ brew_user_home_dir }}/Library/Fonts/'
  when: 'ansible_system == "Darwin"'

- name: "Installing 'awesome-terminal-fonts' /usr/share/fonts/"
  copy:
    src: '/tmp/awesome-terminal-fonts/build/'
    dest: '/usr/share/fonts/'
  when: 'ansible_system == "Linux" and which_fc_cache.rc == 0'
  become: yes

- name: "Installing 'awesome-terminal-fonts' /Library/Fonts"
  copy:
    src: '/tmp/awesome-terminal-fonts/build/'
    dest: '/Library/Fonts'
  when: 'ansible_system == "Darwin"'
  become: yes

- name: "Rebuild font cache"
  shell: "fc-cache -f -v"
  when: 'ansible_system == "Linux" and which_fc_cache.rc == 0'
  become: yes

- name: "Installing powerline-status via pip"
  pip:
    name: powerline-status
    state: latest
    extra_args: --user
    executable: "{{ local_pip3_path }}"
  ignore_errors: True

- name: "Installing zsh via homebrew"
  homebrew:
    name: zsh
    state: latest

- name: "Adding zsh to /etc/shells"
  lineinfile:
    path: '/etc/shells'
    line: '{{ brew_brew_bin_path }}/zsh'
  become: yes

- name: "Installing zsh-completions via homebrew"
  homebrew:
    name: zsh-completions
    state: latest

- name: "Installing prezto"
  git:
    repo: 'https://github.com/sorin-ionescu/prezto.git'
    dest: '{{ brew_user_home_dir }}/.zprezto'
    version: 'master'

#- name: "Configure zshrc: {{ brew_user_home_dir }}/.zshrc"
#  shell: |
#    setopt EXTENDED_GLOB
#    for rcfile in ~/.zprezto/runcoms/^README.md(.N); do
#      unlink ~/.${rcfile:t}
#      cp "$rcfile" ~/.${rcfile:t}
#    done
#  args:
#    executable: {{ brew_install_path }}/bin/zsh
#  tags:
#    - zsh

- name: "Verifying if {{ brew_user_home_dir }}/.oh-my-zsh exists"
  stat:
    path: "{{ brew_user_home_dir }}/.oh-my-zsh"
  register: state

- name: "Clean {{ brew_user_home_dir }}/.oh-my-zsh"
  file:
    state: absent
    path: "{{ brew_user_home_dir }}/.oh-my-zsh"
  when: state.stat.exists

- name: "Downloading oh-my-zsh"
  git:
    repo: 'https://github.com/robbyrussell/oh-my-zsh.git'
    dest: '/tmp/oh-my-zsh'
    version: 'master'

- name: "Changing default shell to zsh "
  shell: 'chsh -s {{ brew_brew_bin_path }}/zsh {{ brew_user }}'
  become: true
  become_user: root

- name: "Installing Oh My Zsh"
  shell: '/tmp/oh-my-zsh/tools/install.sh'
  ignore_errors: True
  environment:
    SHELL: "{{ brew_brew_bin_path }}/zsh"
  args:
    executable: "{{ brew_brew_bin_path }}/zsh"

#- name: "Adding homebrew to PATH in {{ brew_user_home_dir }}/.zshrc"
#  blockinfile:
#    create: yes
#    dest: '{{ brew_user_home_dir }}/.zshrc'
#    marker: "# {mark} homebrew PATH"
#    block: |
#      export PATH="{{ brew_install_path }}/sbin:{{ brew_install_path }}/bin:$PATH"
#  tags:
#  - zsh

- name: "Adding aliases {{ brew_user_home_dir }}/.zshrc"
  blockinfile:
    create: yes
    dest: '{{ brew_user_home_dir }}/.zshrc'
    marker: "# {mark} export aliases"
    block: |
      if [[ -f ~/.aliases ]]; then
        source ~/.aliases
      fi

- name: "Setting EDITOR to vim"
  lineinfile:
    path: '{{ brew_user_home_dir }}/.zshrc'
    regexp: '^export EDITOR=.*'
    line: 'export EDITOR=vim'

- name: "Setting VISUAL to vim"
  lineinfile:
    path: '{{ brew_user_home_dir }}/.zshrc'
    regexp: '^export VISUAL=.*'
    line: 'export VISUAL=vim'

- lineinfile:
    path: '{{ brew_user_home_dir }}/.zshrc'
    regexp: '^DEFAULT_USER=.*'
    line: 'DEFAULT_USER="$USER"'

- name: "Adding Prezto modules to {{ brew_user_home_dir }}/.zpreztorc"
  blockinfile:
    dest: '{{ brew_user_home_dir }}/.zshrc'
    marker: "# {mark} Prezto Modules"
    block: |
      zstyle ':prezto:load' pmodule \
        'environment' \
        'terminal' \
        'editor' \
        'history' \
        'directory' \
        'spectrum' \
        'utility' \
        'completion' \
        'git' \
        'syntax-highlighting' \
        'history-substring-search' \
        'prompt'

      zstyle ':prezto:module:prompt' theme 'paradox'

- name: "Adding locales to PATH in {{ brew_user_home_dir }}/.zshrc"
  blockinfile:
    dest: '{{ brew_user_home_dir }}/.zshrc'
    marker: "# {mark} locales PATH"
    insertbefore: BOF
    block: |
      export LC_ALL=en_US.UTF-8
      export LANG=en_US.UTF-8
      setopt +o nomatch
      if [[ -d $HOME/.fonts ]]; then
        source $HOME/.fonts/*.sh
      fi
      setopt -o nomatch

- name: "Adding Prezto to {{ brew_user_home_dir }}/.zshrc"
  blockinfile:
    dest: '{{ brew_user_home_dir }}/.zshrc'
    marker: "# {mark} Prezto init"
    insertbefore: BOF
    block: |
      # Source Prezto.
      if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
        source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
      fi

      # Customize to your needs...

- name: "Resolve site-packages location"
  shell: "{{ local_python3_path }}/python -m site --user-site"
  register: result
  tags:
    - always

- name: "Register site_packages_dir fact"
  set_fact: site_packages_dir="{{ result.stdout }}"
  tags:
    - always

- name: "Resolve python user base dir"
  shell: "{{ local_python3_path }}/python -m site --user-base"
  register: result
  tags:
    - always

- name: "Register python_user_base_dir fact"
  set_fact: python_user_base_dir="{{ result.stdout }}"
  tags:
    - always

- name: "Adding python_user_base_dir to PATH in {{ brew_user_home_dir }}/.zshrc"
  blockinfile:
    dest: '{{ brew_user_home_dir }}/.zshrc'
    marker: "# {mark} python_user_base_dir PATH"
    block: |
      export PATH="{{ python_user_base_dir }}/bin:$PATH"

- name: "Adding powerline to config {{ brew_user_home_dir }}/.zshrc"
  blockinfile:
    dest: '{{ brew_user_home_dir }}/.zshrc'
    marker: "# {mark} powerline"
    block: |
      source {{ site_packages_dir }}/powerline/bindings/zsh/powerline.zsh

- name: "Adding ssh agent init to {{ brew_user_home_dir }}/.zshrc"
  blockinfile:
    dest: '{{ brew_user_home_dir }}/.zshrc'
    marker: "# {mark} ssh-agent"
    block: |
      [[ -f ~/.ssh-agent-init ]] && source ~/.ssh-agent-init
      [[ -z $ITERM_PROFILE ]] || [[ "Default" == $ITERM_PROFILE ]] && {
        [[ -f /tmp/ssh_agent_default.env ]] && {
          eval "$(cat /tmp/ssh_agent_default.env)"
        } || {
          ssh-agent -s > /tmp/ssh_agent_default.env
          eval "$(cat /tmp/ssh_agent_default.env)"
          [[ -f ~/.ssh/id_rsa ]] && ssh-add ~/.ssh/id_rsa
        }
      }

- name: "Ensure permissions (macOS)"
  shell: "{{ brew_brew_bin_path }}/zsh -c '. ~/.zshrc && compaudit | xargs chmod g-w,o-w'"
  ignore_errors: yes
  when: "ansible_system == 'Darwin'"

- name: "Ensure permissions (Linux)"
  shell: "{{ brew_brew_bin_path }}/zsh -c '. ~/.zshrc && compaudit | xargs --no-run-if-empty chmod g-w,o-w'"
  ignore_errors: yes
  when: 'ansible_system == "Linux"'



